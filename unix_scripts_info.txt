# To see the string comparsion, file operators to use
help test

classical command: "test"
 - Also: [
 - harder to use, easier to make mistake
 - only use for portability

[[ ... ]] is a bash extension
 - Not a command but a special syntax
 - No quotes needed around variable
 - Good habit: use [[ .. ]] instead of [ .. ]

# to see help for builtin commands, type
help builtins

# File test operators
# type at the prompt for the file test operators
help test
or online: http://tldp.org/LDP/abs/html/fto.html

# command groups
- group commands with {}
- separate the commands with newlines or semicolons
- use spaces around braces (important) e.g { cmd1; cmd2; cmdd3; }

# Arithmetic tests
[[ arg1 OP arg2 ]]
  where OP is:
    -eq: equality
    -ne: not equal
    -gt: greater than
    -lt: less than
    - don't use =,>,< for numbes as these work on strings.     

( the following points from online)
1. quoting the parameter expansions inside [[ .. ]] and ((...)) is optional. if the variable is not set -gt, -eq will assume
   a value of 0.
2. Using $ is optional inside (( ... )) but susing it can help avoid unintentional errors. 

# Arithmetic expressions
let command
- let n=100/2
- ((..))
 - ((++x))
 - ((p=x/100))
 - This ((..)) is a command equivalent to let but this allows us to use spaces within etc.)

- $((..))
  - this is a substituation, not a command
  - p=$((x/100))
- No need to quote variables inside arithmetic expression

---------------------------------------------------------------------------------------
n=10
while ((n)); do echo $n; ((n--)); done
#displays 10 9, 8 (etc on a new line)
---------------------------------------------------------------------------------------

more info on arthmetic expressions is here:
http://goo.gl/HnPkiq


# special variables
 $#: contains number of script arguments
 $?: contains the exit status of the last command

# get the length of the string in a variable
  use ${#var}
 
# if/elif/else/fi 
 if [[ ]]
   ...
 elif [[ ]]]
   ...
 else
   ...
 fi   
 
# conditional (And/Or/Not)

use && for And
use || for Or
use ! for not

don't use -a, -o for and, or
 even though "help test" says so (only we will get into trouble)
 
# return codes
0 = success, everything else is = failure

# echo options -e, -n aren't portable so have to use printf

# printf, one arg (by default,printf will not append a newline)
printf "hello %s, how are you?\n" $USER

# on ubuntu
man 3 printf

# two args
printf "hello %s, how are you? your HOME dir is %s\n" $USER $HOME

# formating
printf "|%20s | %20s | %20s |\n" $(ls)

# to save the output to variable greeting (-v)  instead of printing out
printf -v greeting "hello %s, how are you?\n" $USER
echo $greeting
hello chokkara, how are you?

# read

- reads input into a variable
- read x
- no variable specified? will use REPLY
- -s will supress ouptut (useful for passwords)
- -r : suppresses the escape characters so it always a good to use.
- -n number: exactly accepts number characters (e.g -n 1: mean will accept only one character)
read -r -n 1 -s answer

# here is the assignment to IFS is set only during that line but after the next line it will set to whatever it was
# IFS: Input Field Separator (defaults to space , tab, newline)
IFS=: read a b
1:2
echo $a 
 1
echo $b
 2

# Standard streams
0: stdin (/dev/stdin)
1: stdout (/dev/stdout)
2: stderr (/dev/stderr)

- /dev/null discards all data sent to it.

$RANDOM is variable which the OS guess, which we can use in the scripts

while [[ ]]; do
done

until [[ ]]; do
done

for var in WORDS; do
done

# another variant of for
for (( INIT; TEST; UPDATE )); do
done

# similar to C language
break
continue

# declare an integer variable x and assign (if you try to assign an string to an integer variable, bash won't give you error, instead  it will set to 0).
declare -i x=10
#print its type
declare -p x

# unset an attribue with +
declare +i x

# delcare and export a integer variable
declare -x -i var=10

# arrays
ar=(my name is sreenivas chokkarapu)
# print the type
declare -p ar
ouptuts: declare -a ar='([0]="my" [1]="name" [2]="is" [3]="sreenivas" [4]="chokkarapu")'
# access array element
echo ${ar[3]}
 => sreenivas
# number of elements in an array
echo ${#ar[@]} 
 => 5
# to display the indices in an array
echo ${!ar[@]} 
0 1 2 3 4
# insert an element in an array ar[15]
ar[15]=shresta
# show indices again
echo ${!ar[@]} 
0 1 2 3 4 15

# arithemetic expressions
((  .. ))
(( ++x ))
echo $x
 => 11
 
 # special variables
   positional parameters: $1, $2 ..$n
   $0 -> holds the name of the script you're running
   
   shift
   shift 3
   

# using history
!! - to represents the last command you run

# if you want to see what the last cat command was, you can run, which will print that command and add it to the end of your history
!cat:p

# !$

 represents the argument from your last command
mkdir /new/awsome/folder
cd !$


history | grep cucumber


# Removing a pattern
${var#pattern} - removes shortest match from begin of string
${var##pattern} - removes longest match from begin of string

${var%pattern} - removes shortest match from end of string
${var%%pattern} - removes longest match from end of string

# search and replace
${var/search/replace} - subsitutes first match in the string
${var//search/replace} - subsitutes all match in the string

#Anchor your pattern
${var/#pattern/string} - matches beginning of the string
${var/%pattern/string} - matches end of the string


# default values
# the value is not set to the var 
${var:-value} : will evaluate to "value" if var is empty or unset
${var-value} : similar, but only if var is unset (you may want sometimes var to hold empty value)

# assign default values
# the value is set to the var variable
${var:=value} : will evaluate to "value" if var is empty or unset and assigns it to var
${var:-value} : similar, but only if var is unset (you may want sometimes var to hold empty value)

# this is the end of the course



